'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createPubSubConnector;

var _react = require('react');

var _hoistNonReactStatics = require('hoist-non-react-statics');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _isPlainObject = require('../utils/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _shallowEqual = require('../utils/shallowEqual');

var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

var _pubSubShape = require('../shapes/pubSubShape');

var _pubSubShape2 = _interopRequireDefault(_pubSubShape);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultMapPublishToProps = function defaultMapPublishToProps(publish) {
  return { publish: publish };
};
var defaultMapSubscriptionsToProps = function defaultMapSubscriptionsToProps() {
  return {};
};
var defaultInitMapSubscriptionsToProps = function defaultInitMapSubscriptionsToProps() {
  return defaultMapSubscriptionsToProps;
};

function getDisplayName(WrappedComponent) {
  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
}

function cleanEmptyKeys() {
  var obj = arguments.length <= 0 || arguments[0] === void 0 ? {} : arguments[0];

  Object.keys(obj).filter(function (key) {
    return obj[key] === void 0 || obj[key] === null;
  }).forEach(function (key) {
    return delete obj[key];
  });
  return obj;
}

function wrapSubscritionsMap(mapSubscriptionsToProps) {
  var validMappedSubscriptions = Object.keys(mapSubscriptionsToProps).every(function (key) {
    return typeof mapSubscriptionsToProps[key] === 'function' || typeof mapSubscriptionsToProps[key] === 'string';
  });

  if (!validMappedSubscriptions) {
    throw new Error('Every mapped Subscription of "createPubSubConnector" must be a function' + 'returning the value to be passed as prop to the decorated component.');
  }

  return function (pubSub, notifyChange, getProps) {
    var add = pubSub.add;

    var map = {};

    var updateStoredMapFromObject = function updateStoredMapFromObject(updatedValue) {
      var updatedMap = {};
      var keysToUpdate = Object.keys(updatedValue).filter(function (key) {
        if (map.hasOwnProperty(key)) {
          if (updatedValue[key] && (0, _shallowEqual2.default)(map[key], updatedValue[key])) {
            return false;
          }
        }
        updatedMap[key] = updatedValue[key];
        return true;
      });

      if (keysToUpdate.length) {
        map = cleanEmptyKeys(_extends({}, map, updatedMap));
        return true;
      }
      return false;
    };

    var updateStoredMapFromKey = function updateStoredMapFromKey(key, updatedValue) {
      if (map.hasOwnProperty(key)) {
        if (updatedValue && (0, _shallowEqual2.default)(map[key], updatedValue)) {
          return false;
        }
      }
      map = cleanEmptyKeys(_extends({}, map, _defineProperty({}, key, updatedValue)));
      return true;
    };

    Object.keys(mapSubscriptionsToProps).forEach(function (key) {
      var transformerOrAlias = mapSubscriptionsToProps[key];
      if (typeof transformerOrAlias === 'function') {
        add(key, function () {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var updatedValue = transformerOrAlias.apply(void 0, args.concat([getProps()]));
          if (updateStoredMapFromObject(updatedValue)) {
            notifyChange();
          }
        });
      } else {
        add(key, function (payload) {
          if (updateStoredMapFromKey(transformerOrAlias, payload)) {
            notifyChange();
          }
        });
      }
    });

    return function () {
      return map;
    };
  };
}

function wrapPublishMethods(mapPublishToProps) {
  return function (publish) {
    return Object.keys(mapPublishToProps).filter(function (key) {
      return typeof mapPublishToProps[key] === 'function';
    }).reduce(function (acc, key) {
      acc[key] = function () {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return mapPublishToProps[key].apply(mapPublishToProps, [publish].concat(args));
      };
      return acc;
    }, {});
  };
}

function createPubSubConnector(mapSubscriptionsToProps, mapPublishToProps) {
  var options = arguments.length <= 2 || arguments[2] === void 0 ? {} : arguments[2];

  if (mapSubscriptionsToProps && typeof mapSubscriptionsToProps !== 'function' && !(0, _isPlainObject2.default)(mapSubscriptionsToProps)) {
    throw new Error('"createPubSubConnector" expected "mapSubscriptionsToProps" to be a function' + (' or a plain object, instead received: ' + mapSubscriptionsToProps + '.'));
  }
  var shouldMapSubscriptions = (0, _isPlainObject2.default)(mapSubscriptionsToProps) ? Object.keys(mapSubscriptionsToProps).length : Boolean(mapSubscriptionsToProps);

  var finalMapSubscriptionsToProps = defaultMapSubscriptionsToProps;
  var doSubscribedPropsDependOnOwnProps = false;

  var finalMapPublishToProps = (0, _isPlainObject2.default)(mapPublishToProps) ? wrapPublishMethods(mapPublishToProps) : mapPublishToProps || defaultMapPublishToProps;
  var doPublishPropsDependOnOwnProps = finalMapPublishToProps.length > 1;

  var _ref = options || {};

  var _ref$withRef = _ref.withRef;
  var withRef = _ref$withRef === void 0 ? false : _ref$withRef;

  function initComputeSubscribedProps(pubSub, notifier, getProps) {
    var subscriber = void 0;
    if ((0, _isPlainObject2.default)(mapSubscriptionsToProps)) {
      subscriber = wrapSubscritionsMap(mapSubscriptionsToProps);
    } else {
      subscriber = mapSubscriptionsToProps || defaultInitMapSubscriptionsToProps;
    }
    finalMapSubscriptionsToProps = subscriber(pubSub, notifier, getProps);
    doSubscribedPropsDependOnOwnProps = finalMapSubscriptionsToProps.length > 0;
  }

  function computeSubscribedProps(props) {
    var subscribedProps = doSubscribedPropsDependOnOwnProps ? finalMapSubscriptionsToProps(props) : finalMapSubscriptionsToProps();

    if (!(0, _isPlainObject2.default)(subscribedProps)) {
      throw new Error('\'mapSubscriptionsToProps\' must return an object.' + ('Instead received ' + subscribedProps));
    }
    return subscribedProps;
  }

  function computePublishProps(pubSub, props) {
    var publish = pubSub.publish;

    var publishProps = doPublishPropsDependOnOwnProps ? finalMapPublishToProps(publish, props) : finalMapPublishToProps(publish);

    if (!(0, _isPlainObject2.default)(publishProps)) {
      throw new Error('\'mapPublishToProps\' must return an object.' + ('Instead received ' + publishProps));
    }
    return publishProps;
  }

  return function wrapComponent(Composed) {
    var PubSubConnector = function (_Component) {
      _inherits(PubSubConnector, _Component);

      function PubSubConnector(props, context) {
        _classCallCheck(this, PubSubConnector);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PubSubConnector).call(this, props, context));

        _this.pubSubCore = props.pubSubCore || context.pubSubCore;

        if (!_this.pubSubCore) {
          throw new Error('Could not find "pubSubCore" in either the context or ' + ('props of "' + _this.constructor.displayName + '". ') + 'Either wrap the root component in a <PubSubProvider>, ' + ('or explicitly pass "pubSubCore" as a prop to "' + _this.constructor.displayName + '".'));
        }
        _this.state = {};
        _this.pubSub = _this.pubSubCore.register(_this);
        return _this;
      }

      _createClass(PubSubConnector, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          this.trySubscribe();
        }
      }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
          if (!(0, _shallowEqual2.default)(nextProps, this.props)) {
            this.haveOwnPropsChanged = true;
          }
        }
      }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate() {
          return this.haveOwnPropsChanged || this.hasSubscribedPropsChanged;
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          this.pubSub.unsubscribe();
        }
      }, {
        key: 'getWrappedInstance',
        value: function getWrappedInstance() {
          if (!withRef) {
            throw new Error('To access the wrapped instance, you need to specify explicitly' + ' { withRef: true } in the options passed to the createPubSubConnector() call.');
          }
          return this.refs.wrappedInstance;
        }
      }, {
        key: 'hasSubscriptions',
        value: function hasSubscriptions() {
          if (this.pubSub) {
            return this.pubSub.subscriptions.length ? true : false;
          }
          return false;
        }
      }, {
        key: 'notifyChange',
        value: function notifyChange() {
          var prevSubscribedProps = this.state.subscribedProps;
          var subscribedProps = finalMapSubscriptionsToProps(this.props);

          if (prevSubscribedProps !== subscribedProps) {
            this.hasSubscribedPropsChanged = true;
            this.setState({ subscribedProps: subscribedProps });
          }
        }
      }, {
        key: 'trySubscribe',
        value: function trySubscribe() {
          var _this2 = this;

          if (shouldMapSubscriptions) {
            initComputeSubscribedProps(this.pubSub, function () {
              return _this2.notifyChange();
            }, function () {
              return _this2.props;
            });
            this.notifyChange();
          }
        }
      }, {
        key: 'updateSubscribedPropsIfNeeded',
        value: function updateSubscribedPropsIfNeeded() {
          var nextSubscribedProps = computeSubscribedProps(this.props);
          if (this.subscribedProps && (0, _shallowEqual2.default)(nextSubscribedProps, this.subscribedProps)) {
            return false;
          }

          this.subscribedProps = nextSubscribedProps;
          return true;
        }
      }, {
        key: 'updatePublishPropsIfNeeded',
        value: function updatePublishPropsIfNeeded() {
          var nextPublishProps = computePublishProps(this.pubSub, this.props);
          if (this.publishProps && (0, _shallowEqual2.default)(nextPublishProps, this.publishProps)) {
            return false;
          }

          this.publishProps = nextPublishProps;
          return true;
        }
      }, {
        key: 'render',
        value: function render() {
          var haveOwnPropsChanged = this.haveOwnPropsChanged;
          var hasSubscribedPropsChanged = this.hasSubscribedPropsChanged;
          var renderedElement = this.renderedElement;
          var pubSub = this.pubSub;

          this.haveOwnPropsChanged = false;
          this.hasSubscribedPropsChanged = false;

          var shouldUpdateSubscribedProps = true;
          var shouldUpdatePublishProps = true;
          if (renderedElement) {
            shouldUpdateSubscribedProps = hasSubscribedPropsChanged || haveOwnPropsChanged && doSubscribedPropsDependOnOwnProps;
            shouldUpdatePublishProps = haveOwnPropsChanged && doPublishPropsDependOnOwnProps;
          }

          var haveSubscribedPropsChanged = false;
          var havePublishPropsChanged = false;
          if (shouldUpdateSubscribedProps) {
            haveSubscribedPropsChanged = this.updateSubscribedPropsIfNeeded();
          }
          if (shouldUpdatePublishProps) {
            havePublishPropsChanged = this.updatePublishPropsIfNeeded();
          }

          if (!haveSubscribedPropsChanged && !havePublishPropsChanged && !haveOwnPropsChanged && renderedElement) {
            return renderedElement;
          }

          var baseProps = { pubSub: pubSub };
          if (withRef) {
            _extends(baseProps, { ref: 'wrappedInstance' });
          }

          var mergedProps = _extends({}, this.props, this.subscribedProps, this.publishProps, baseProps);

          this.renderedElement = (0, _react.createElement)(Composed, mergedProps);

          return this.renderedElement;
        }
      }]);

      return PubSubConnector;
    }(_react.Component);

    PubSubConnector.contextTypes = {
      pubSubCore: _pubSubShape2.default
    };

    PubSubConnector.propTypes = {
      pubSubCore: _pubSubShape2.default
    };

    PubSubConnector.displayName = 'PubSubConnector(' + getDisplayName(Composed) + ')';
    PubSubConnector.WrappedComponent = Composed;

    return (0, _hoistNonReactStatics2.default)(PubSubConnector, Composed);
  };
}
//# sourceMappingURL=data:application/json;base64,