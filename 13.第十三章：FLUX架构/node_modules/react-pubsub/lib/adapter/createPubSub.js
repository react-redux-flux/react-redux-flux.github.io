'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createDefaultAdapter = require('./createDefaultAdapter');

var _createDefaultAdapter2 = _interopRequireDefault(_createDefaultAdapter);

var _createSubscription = require('./createSubscription');

var _createSubscription2 = _interopRequireDefault(_createSubscription);

var _createPubSubAdapter = require('./createPubSubAdapter');

var _createPubSubAdapter2 = _interopRequireDefault(_createPubSubAdapter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
   createPubSub function

   @param subscribersMap Object, default to empty object, subscribers that will be populated
   like so:
   subscribersMap[MyReactComponent] = {...}
   @param adapter Object, default to default adapter specified
   @returns an object wrapping register/unregister for a particular component
   */
var createPubSub = function createPubSub() {
  var subscribersMap = arguments.length <= 0 || arguments[0] === void 0 ? {} : arguments[0];
  var adapter = arguments.length <= 1 || arguments[1] === void 0 ? (0, _createDefaultAdapter2.default)() : arguments[1];

  var adapterAPI = (0, _createPubSubAdapter2.default)(adapter);
  var api = {
    register: function register(component) {
      if (!component) {
        throw new Error('\'createPubSub.register()\' expected a component instead ' + ('received: ' + component));
      }
      if (!subscribersMap[component]) {
        var unsubscribe = function unsubscribe() {
          return api.unregister(component);
        };
        subscribersMap[component] = (0, _createSubscription2.default)(adapterAPI, unsubscribe);
      }
      return subscribersMap[component];
    },
    unregister: function unregister(component) {
      if (!component) {
        throw new Error('\'createPubSub.unregister()\' expected a component instead ' + ('received: ' + component));
      }
      if (subscribersMap[component]) {
        subscribersMap[component].removeAll();
        delete subscribersMap[component];
      } else {
        console.error( // eslint-disable-line no-console
        component.displayName + ' is NOT registerd to PubSub');
      }
    }
  };
  return api;
};
exports.default = createPubSub;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZGFwdGVyL2NyZWF0ZVB1YlN1Yi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWFBLElBQU0sZUFBZSxTQUFmLFlBQWUsR0FBMkQ7TUFBMUQsb0VBQWlCLGtCQUF5QztNQUFyQyw2REFBVSxxREFBMkI7O0FBQzlFLE1BQU0sYUFBYSxtQ0FBb0IsT0FBcEIsQ0FBYixDQUR3RTtBQUU5RSxNQUFNLE1BQU07QUFDVixnQ0FBUyxXQUFXO0FBQ2xCLFVBQUksQ0FBQyxTQUFELEVBQVk7QUFDZCxjQUFNLElBQUksS0FBSixDQUNKLDhFQUNlLFVBRGYsQ0FERixDQURjO09BQWhCO0FBTUEsVUFBSSxDQUFDLGVBQWUsU0FBZixDQUFELEVBQTRCO0FBQzlCLFlBQU0sY0FBYyxTQUFkLFdBQWM7aUJBQU0sSUFBSSxVQUFKLENBQWUsU0FBZjtTQUFOLENBRFU7QUFFOUIsdUJBQWUsU0FBZixJQUE0QixrQ0FBbUIsVUFBbkIsRUFBK0IsV0FBL0IsQ0FBNUIsQ0FGOEI7T0FBaEM7QUFJQSxhQUFPLGVBQWUsU0FBZixDQUFQLENBWGtCO0tBRFY7QUFjVixvQ0FBVyxXQUFXO0FBQ3BCLFVBQUksQ0FBQyxTQUFELEVBQVk7QUFDZCxjQUFNLElBQUksS0FBSixDQUNKLGdGQUNlLFVBRGYsQ0FERixDQURjO09BQWhCO0FBTUEsVUFBSSxlQUFlLFNBQWYsQ0FBSixFQUErQjtBQUM3Qix1QkFBZSxTQUFmLEVBQTBCLFNBQTFCLEdBRDZCO0FBRTdCLGVBQU8sZUFBZSxTQUFmLENBQVAsQ0FGNkI7T0FBL0IsTUFHTztBQUNMLGdCQUFRLEtBQVI7QUFDSyxrQkFBVSxXQUFWLGdDQURMLEVBREs7T0FIUDtLQXJCUTtHQUFOLENBRndFO0FBaUM5RSxTQUFPLEdBQVAsQ0FqQzhFO0NBQTNEO2tCQW1DTiIsImZpbGUiOiJjcmVhdGVQdWJTdWIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlRGVmYXVsdEFkYXB0ZXIgZnJvbSAnLi9jcmVhdGVEZWZhdWx0QWRhcHRlcic7XG5pbXBvcnQgY3JlYXRlU3Vic2NyaXB0aW9uIGZyb20gJy4vY3JlYXRlU3Vic2NyaXB0aW9uJztcbmltcG9ydCBjcmVhdGVQdWJTdWJBZGFwdGVyIGZyb20gJy4vY3JlYXRlUHViU3ViQWRhcHRlcic7XG5cbi8qXG4gICBjcmVhdGVQdWJTdWIgZnVuY3Rpb25cblxuICAgQHBhcmFtIHN1YnNjcmliZXJzTWFwIE9iamVjdCwgZGVmYXVsdCB0byBlbXB0eSBvYmplY3QsIHN1YnNjcmliZXJzIHRoYXQgd2lsbCBiZSBwb3B1bGF0ZWRcbiAgIGxpa2Ugc286XG4gICBzdWJzY3JpYmVyc01hcFtNeVJlYWN0Q29tcG9uZW50XSA9IHsuLi59XG4gICBAcGFyYW0gYWRhcHRlciBPYmplY3QsIGRlZmF1bHQgdG8gZGVmYXVsdCBhZGFwdGVyIHNwZWNpZmllZFxuICAgQHJldHVybnMgYW4gb2JqZWN0IHdyYXBwaW5nIHJlZ2lzdGVyL3VucmVnaXN0ZXIgZm9yIGEgcGFydGljdWxhciBjb21wb25lbnRcbiAgICovXG5jb25zdCBjcmVhdGVQdWJTdWIgPSAoc3Vic2NyaWJlcnNNYXAgPSB7fSwgYWRhcHRlciA9IGNyZWF0ZURlZmF1bHRBZGFwdGVyKCkpID0+IHtcbiAgY29uc3QgYWRhcHRlckFQSSA9IGNyZWF0ZVB1YlN1YkFkYXB0ZXIoYWRhcHRlcik7XG4gIGNvbnN0IGFwaSA9IHtcbiAgICByZWdpc3Rlcihjb21wb25lbnQpIHtcbiAgICAgIGlmICghY29tcG9uZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgJ2NyZWF0ZVB1YlN1Yi5yZWdpc3RlcigpJyBleHBlY3RlZCBhIGNvbXBvbmVudCBpbnN0ZWFkIGBcbiAgICAgICAgICArIGByZWNlaXZlZDogJHtjb21wb25lbnR9YFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKCFzdWJzY3JpYmVyc01hcFtjb21wb25lbnRdKSB7XG4gICAgICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gKCkgPT4gYXBpLnVucmVnaXN0ZXIoY29tcG9uZW50KTtcbiAgICAgICAgc3Vic2NyaWJlcnNNYXBbY29tcG9uZW50XSA9IGNyZWF0ZVN1YnNjcmlwdGlvbihhZGFwdGVyQVBJLCB1bnN1YnNjcmliZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3Vic2NyaWJlcnNNYXBbY29tcG9uZW50XTtcbiAgICB9LFxuICAgIHVucmVnaXN0ZXIoY29tcG9uZW50KSB7XG4gICAgICBpZiAoIWNvbXBvbmVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYCdjcmVhdGVQdWJTdWIudW5yZWdpc3RlcigpJyBleHBlY3RlZCBhIGNvbXBvbmVudCBpbnN0ZWFkIGBcbiAgICAgICAgICArIGByZWNlaXZlZDogJHtjb21wb25lbnR9YFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHN1YnNjcmliZXJzTWFwW2NvbXBvbmVudF0pIHtcbiAgICAgICAgc3Vic2NyaWJlcnNNYXBbY29tcG9uZW50XS5yZW1vdmVBbGwoKTtcbiAgICAgICAgZGVsZXRlIHN1YnNjcmliZXJzTWFwW2NvbXBvbmVudF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICBgJHtjb21wb25lbnQuZGlzcGxheU5hbWV9IGlzIE5PVCByZWdpc3RlcmQgdG8gUHViU3ViYFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG4gIHJldHVybiBhcGk7XG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUHViU3ViO1xuIl19