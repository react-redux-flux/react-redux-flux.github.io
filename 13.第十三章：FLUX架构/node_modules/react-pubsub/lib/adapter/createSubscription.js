'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
   Creates the subscription object

   @param autoUnmount boolean defaults to true, if it has to remove all subscriptions on cwunmount
   @param adapter object the pubsub adapter
   @return the subscription object
   */
var createSubscription = function createSubscription(adapter, unsubscribe) {
  if (!adapter) {
    throw new Error('\'createSubscription()\' expected an adapter as first argument instead received: ' + adapter);
  }

  if (!unsubscribe) {
    throw new Error('\'createSubscription()\' expected a function as second argument instead ' + ('received: ' + unsubscribe));
  }

  var sub = {
    unsubscribe: unsubscribe,
    subscriptions: [],

    add: function add(action, cb) {
      if (!action || typeof action !== 'string') {
        throw new Error('Subscription \'.add()\' expected an action (string) as first argument ' + ('instead received: ' + action));
      }

      if (!cb || typeof cb !== 'function') {
        throw new Error('Subscription \'.add()\' expected a function as second argument instead received: ' + cb);
      }

      var token = adapter.subscribe(action, cb);
      sub.subscriptions.push(token);
      return function () {
        var idx = sub.subscriptions.indexOf(token);
        if (idx < 0) {
          throw new Error('PubSub Error: you\'re trying to unsubscribe an unrecognized token');
        }
        sub.subscriptions.splice(idx, 1);
        adapter.unsubscribe(token);
      };
    },
    removeAll: function removeAll() {
      sub.subscriptions.forEach(function (token) {
        return adapter.unsubscribe(token);
      });
      sub.subscriptions = [];
    },
    publish: function publish(action) {
      if (!action || typeof action !== 'string') {
        throw new Error('Subscription \'.publish()\' expected an action (string) as first argument ' + ('instead received: ' + action));
      }

      for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        params[_key - 1] = arguments[_key];
      }

      adapter.publish.apply(adapter, [action].concat(params));
    }
  };

  return sub;
};

exports.default = createSubscription;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZGFwdGVyL2NyZWF0ZVN1YnNjcmlwdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFPQSxJQUFNLHFCQUFxQixTQUFyQixrQkFBcUIsQ0FBQyxPQUFELEVBQVUsV0FBVixFQUEwQjtBQUNuRCxNQUFJLENBQUMsT0FBRCxFQUFVO0FBQ1osVUFBTSxJQUFJLEtBQUosdUZBQzhFLE9BRDlFLENBQU4sQ0FEWTtHQUFkOztBQU1BLE1BQUksQ0FBQyxXQUFELEVBQWM7QUFDaEIsVUFBTSxJQUFJLEtBQUosQ0FDSiw2RkFDZSxZQURmLENBREYsQ0FEZ0I7R0FBbEI7O0FBT0EsTUFBTSxNQUFNO0FBQ1YsNEJBRFU7QUFFVixtQkFBZSxFQUFmOztBQUVBLHNCQUFJLFFBQVEsSUFBSTtBQUNkLFVBQUksQ0FBQyxNQUFELElBQVcsT0FBTyxNQUFQLEtBQWtCLFFBQWxCLEVBQTRCO0FBQ3pDLGNBQU0sSUFBSSxLQUFKLENBQ0osbUdBQ3VCLE9BRHZCLENBREYsQ0FEeUM7T0FBM0M7O0FBT0EsVUFBSSxDQUFDLEVBQUQsSUFBTyxPQUFPLEVBQVAsS0FBYyxVQUFkLEVBQTBCO0FBQ25DLGNBQU0sSUFBSSxLQUFKLHVGQUM4RSxFQUQ5RSxDQUFOLENBRG1DO09BQXJDOztBQU1BLFVBQU0sUUFBUSxRQUFRLFNBQVIsQ0FBa0IsTUFBbEIsRUFBMEIsRUFBMUIsQ0FBUixDQWRRO0FBZWQsVUFBSSxhQUFKLENBQWtCLElBQWxCLENBQXVCLEtBQXZCLEVBZmM7QUFnQmQsYUFBTyxZQUFNO0FBQ1gsWUFBTSxNQUFNLElBQUksYUFBSixDQUFrQixPQUFsQixDQUEwQixLQUExQixDQUFOLENBREs7QUFFWCxZQUFJLE1BQU0sQ0FBTixFQUFTO0FBQ1gsZ0JBQU0sSUFBSSxLQUFKLENBQVUsbUVBQVYsQ0FBTixDQURXO1NBQWI7QUFHQSxZQUFJLGFBQUosQ0FBa0IsTUFBbEIsQ0FBeUIsR0FBekIsRUFBOEIsQ0FBOUIsRUFMVztBQU1YLGdCQUFRLFdBQVIsQ0FBb0IsS0FBcEIsRUFOVztPQUFOLENBaEJPO0tBSk47QUE4QlYsb0NBQVk7QUFDVixVQUFJLGFBQUosQ0FBa0IsT0FBbEIsQ0FBMEI7ZUFBUyxRQUFRLFdBQVIsQ0FBb0IsS0FBcEI7T0FBVCxDQUExQixDQURVO0FBRVYsVUFBSSxhQUFKLEdBQW9CLEVBQXBCLENBRlU7S0E5QkY7QUFtQ1YsOEJBQVEsUUFBbUI7QUFDekIsVUFBSSxDQUFDLE1BQUQsSUFBVyxPQUFPLE1BQVAsS0FBa0IsUUFBbEIsRUFBNEI7QUFDekMsY0FBTSxJQUFJLEtBQUosQ0FDSix1R0FDdUIsT0FEdkIsQ0FERixDQUR5QztPQUEzQzs7d0NBRGlCOztPQUFROztBQU96QixjQUFRLE9BQVIsaUJBQWdCLGVBQVcsT0FBM0IsRUFQeUI7S0FuQ2pCO0dBQU4sQ0FkNkM7O0FBNERuRCxTQUFPLEdBQVAsQ0E1RG1EO0NBQTFCOztrQkErRFoiLCJmaWxlIjoiY3JlYXRlU3Vic2NyaXB0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAgIENyZWF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBvYmplY3RcblxuICAgQHBhcmFtIGF1dG9Vbm1vdW50IGJvb2xlYW4gZGVmYXVsdHMgdG8gdHJ1ZSwgaWYgaXQgaGFzIHRvIHJlbW92ZSBhbGwgc3Vic2NyaXB0aW9ucyBvbiBjd3VubW91bnRcbiAgIEBwYXJhbSBhZGFwdGVyIG9iamVjdCB0aGUgcHVic3ViIGFkYXB0ZXJcbiAgIEByZXR1cm4gdGhlIHN1YnNjcmlwdGlvbiBvYmplY3RcbiAgICovXG5jb25zdCBjcmVhdGVTdWJzY3JpcHRpb24gPSAoYWRhcHRlciwgdW5zdWJzY3JpYmUpID0+IHtcbiAgaWYgKCFhZGFwdGVyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYCdjcmVhdGVTdWJzY3JpcHRpb24oKScgZXhwZWN0ZWQgYW4gYWRhcHRlciBhcyBmaXJzdCBhcmd1bWVudCBpbnN0ZWFkIHJlY2VpdmVkOiAke2FkYXB0ZXJ9YFxuICAgICk7XG4gIH1cblxuICBpZiAoIXVuc3Vic2NyaWJlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYCdjcmVhdGVTdWJzY3JpcHRpb24oKScgZXhwZWN0ZWQgYSBmdW5jdGlvbiBhcyBzZWNvbmQgYXJndW1lbnQgaW5zdGVhZCBgXG4gICAgICArIGByZWNlaXZlZDogJHt1bnN1YnNjcmliZX1gXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IHN1YiA9IHtcbiAgICB1bnN1YnNjcmliZSxcbiAgICBzdWJzY3JpcHRpb25zOiBbXSxcblxuICAgIGFkZChhY3Rpb24sIGNiKSB7XG4gICAgICBpZiAoIWFjdGlvbiB8fCB0eXBlb2YgYWN0aW9uICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFN1YnNjcmlwdGlvbiAnLmFkZCgpJyBleHBlY3RlZCBhbiBhY3Rpb24gKHN0cmluZykgYXMgZmlyc3QgYXJndW1lbnQgYFxuICAgICAgICAgICsgYGluc3RlYWQgcmVjZWl2ZWQ6ICR7YWN0aW9ufWBcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjYiB8fCB0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBTdWJzY3JpcHRpb24gJy5hZGQoKScgZXhwZWN0ZWQgYSBmdW5jdGlvbiBhcyBzZWNvbmQgYXJndW1lbnQgaW5zdGVhZCByZWNlaXZlZDogJHtjYn1gXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRva2VuID0gYWRhcHRlci5zdWJzY3JpYmUoYWN0aW9uLCBjYik7XG4gICAgICBzdWIuc3Vic2NyaXB0aW9ucy5wdXNoKHRva2VuKTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGlkeCA9IHN1Yi5zdWJzY3JpcHRpb25zLmluZGV4T2YodG9rZW4pO1xuICAgICAgICBpZiAoaWR4IDwgMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUHViU3ViIEVycm9yOiB5b3VcXCdyZSB0cnlpbmcgdG8gdW5zdWJzY3JpYmUgYW4gdW5yZWNvZ25pemVkIHRva2VuJyk7XG4gICAgICAgIH1cbiAgICAgICAgc3ViLnN1YnNjcmlwdGlvbnMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgIGFkYXB0ZXIudW5zdWJzY3JpYmUodG9rZW4pO1xuICAgICAgfTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlQWxsKCkge1xuICAgICAgc3ViLnN1YnNjcmlwdGlvbnMuZm9yRWFjaCh0b2tlbiA9PiBhZGFwdGVyLnVuc3Vic2NyaWJlKHRva2VuKSk7XG4gICAgICBzdWIuc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgIH0sXG5cbiAgICBwdWJsaXNoKGFjdGlvbiwgLi4ucGFyYW1zKSB7XG4gICAgICBpZiAoIWFjdGlvbiB8fCB0eXBlb2YgYWN0aW9uICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFN1YnNjcmlwdGlvbiAnLnB1Ymxpc2goKScgZXhwZWN0ZWQgYW4gYWN0aW9uIChzdHJpbmcpIGFzIGZpcnN0IGFyZ3VtZW50IGBcbiAgICAgICAgICArIGBpbnN0ZWFkIHJlY2VpdmVkOiAke2FjdGlvbn1gKTtcbiAgICAgIH1cblxuICAgICAgYWRhcHRlci5wdWJsaXNoKGFjdGlvbiwgLi4ucGFyYW1zKTtcbiAgICB9LFxuICB9O1xuXG4gIHJldHVybiBzdWI7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdWJzY3JpcHRpb247XG4iXX0=