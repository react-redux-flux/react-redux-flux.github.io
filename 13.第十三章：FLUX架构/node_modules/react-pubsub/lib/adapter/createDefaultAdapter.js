'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = void 0; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});
var createDefaultAdapter = function createDefaultAdapter() {
  var actions = {};
  var hOP = actions.hasOwnProperty;
  return {
    subscribe: function subscribe(action, cb) {
      if (!action || typeof action !== 'string') {
        throw new Error('Default adapter \'.subscribe()\' ' + 'expected an action (string) as first argument instead ' + ('received: ' + action));
      }

      if (!cb || typeof cb !== 'function') {
        throw new Error('Default adapter \'.subscribe()\' expected a function as second ' + ('argument instead received: ' + cb));
      }

      if (!hOP.call(actions, action)) {
        actions[action] = [];
      }

      actions[action].push(cb);
      return [action, cb];
    },
    unsubscribe: function unsubscribe(token) {
      if (!token || !Array.isArray(token)) {
        throw new Error('Default adapter \'.unsubscribe()\' expected a ' + ('token (array) instead received: ' + token));
      }

      if (token.length !== 2 || typeof token[0] !== 'string' || typeof token[1] !== 'function') {
        throw new Error('Default adapter \'.unsubscribe()\' expected a valid token ' + ('([string, function]) instead received: ' + token));
      }

      var _token = _slicedToArray(token, 2);

      var action = _token[0];
      var cb = _token[1];

      var callbacks = actions[action] || [];
      var idx = callbacks.indexOf(cb);
      if (idx < 0) {
        console.error( // eslint-disable-line no-console
        'You\'re unsubscribing an unrecognized token ' + token);
      } else {
        callbacks.splice(idx, 1);
      }
    },
    publish: function publish(action) {
      for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        params[_key - 1] = arguments[_key];
      }

      if (!action || typeof action !== 'string') {
        throw new Error('Default adapter \'.publish()\' expected an action (string) as ' + ('first argument instead received: ' + action));
      }

      if (!hOP.call(actions, action)) {
        console.info( // eslint-disable-line no-console
        'The action \'' + action + '\' being published has no listeners');
        return;
      }

      actions[action].forEach(function (cb) {
        return cb.apply(void 0, params);
      });
    }
  };
};

exports.default = createDefaultAdapter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZGFwdGVyL2NyZWF0ZURlZmF1bHRBZGFwdGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFNLHVCQUF1QixTQUF2QixvQkFBdUIsR0FBTTtBQUNqQyxNQUFNLFVBQVUsRUFBVixDQUQyQjtBQUVqQyxNQUFNLE1BQU0sUUFBUSxjQUFSLENBRnFCO0FBR2pDLFNBQU87QUFDTCxrQ0FBVSxRQUFRLElBQUk7QUFDcEIsVUFBSSxDQUFDLE1BQUQsSUFBVyxPQUFPLE1BQVAsS0FBa0IsUUFBbEIsRUFBNEI7QUFDekMsY0FBTSxJQUFJLEtBQUosQ0FDSixpSEFFZSxPQUZmLENBREYsQ0FEeUM7T0FBM0M7O0FBUUEsVUFBSSxDQUFDLEVBQUQsSUFBTyxPQUFPLEVBQVAsS0FBYyxVQUFkLEVBQTBCO0FBQ25DLGNBQU0sSUFBSSxLQUFKLENBQ0oscUdBQ2dDLEdBRGhDLENBREYsQ0FEbUM7T0FBckM7O0FBT0EsVUFBSSxDQUFDLElBQUksSUFBSixDQUFTLE9BQVQsRUFBa0IsTUFBbEIsQ0FBRCxFQUE0QjtBQUM5QixnQkFBUSxNQUFSLElBQWtCLEVBQWxCLENBRDhCO09BQWhDOztBQUlBLGNBQVEsTUFBUixFQUFnQixJQUFoQixDQUFxQixFQUFyQixFQXBCb0I7QUFxQnBCLGFBQU8sQ0FBQyxNQUFELEVBQVMsRUFBVCxDQUFQLENBckJvQjtLQURqQjtBQXlCTCxzQ0FBWSxPQUFPO0FBQ2pCLFVBQUksQ0FBQyxLQUFELElBQVUsQ0FBQyxNQUFNLE9BQU4sQ0FBYyxLQUFkLENBQUQsRUFBdUI7QUFDbkMsY0FBTSxJQUFJLEtBQUosQ0FDSix5RkFDcUMsTUFEckMsQ0FERixDQURtQztPQUFyQzs7QUFPQSxVQUFJLE1BQU0sTUFBTixLQUFpQixDQUFqQixJQUNHLE9BQU8sTUFBTSxDQUFOLENBQVAsS0FBb0IsUUFBcEIsSUFBZ0MsT0FBTyxNQUFNLENBQU4sQ0FBUCxLQUFvQixVQUFwQixFQUFnQztBQUNyRSxjQUFNLElBQUksS0FBSixDQUNKLDRHQUM0QyxNQUQ1QyxDQURGLENBRHFFO09BRHZFOztrQ0FRcUIsVUFoQko7O1VBZ0JWLG1CQWhCVTtVQWdCRixlQWhCRTs7QUFpQmpCLFVBQU0sWUFBWSxRQUFRLE1BQVIsS0FBbUIsRUFBbkIsQ0FqQkQ7QUFrQmpCLFVBQU0sTUFBTSxVQUFVLE9BQVYsQ0FBa0IsRUFBbEIsQ0FBTixDQWxCVztBQW1CakIsVUFBSSxNQUFNLENBQU4sRUFBUztBQUNYLGdCQUFRLEtBQVI7eURBQ2dELEtBRGhELEVBRFc7T0FBYixNQUlPO0FBQ0wsa0JBQVUsTUFBVixDQUFpQixHQUFqQixFQUFzQixDQUF0QixFQURLO09BSlA7S0E1Q0c7QUFxREwsOEJBQVEsUUFBbUI7d0NBQVI7O09BQVE7O0FBQ3pCLFVBQUksQ0FBQyxNQUFELElBQVcsT0FBTyxNQUFQLEtBQWtCLFFBQWxCLEVBQTRCO0FBQ3pDLGNBQU0sSUFBSSxLQUFKLENBQ0osMEdBQ3NDLE9BRHRDLENBREYsQ0FEeUM7T0FBM0M7O0FBT0EsVUFBSSxDQUFDLElBQUksSUFBSixDQUFTLE9BQVQsRUFBa0IsTUFBbEIsQ0FBRCxFQUE0QjtBQUM5QixnQkFBUSxJQUFSOzBCQUNpQiw4Q0FEakIsRUFEOEI7QUFJOUIsZUFKOEI7T0FBaEM7O0FBT0EsY0FBUSxNQUFSLEVBQWdCLE9BQWhCLENBQXdCLFVBQUMsRUFBRDtlQUFRLGlCQUFNLE1BQU47T0FBUixDQUF4QixDQWZ5QjtLQXJEdEI7R0FBUCxDQUhpQztDQUFOOztrQkE0RWQiLCJmaWxlIjoiY3JlYXRlRGVmYXVsdEFkYXB0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjcmVhdGVEZWZhdWx0QWRhcHRlciA9ICgpID0+IHtcbiAgY29uc3QgYWN0aW9ucyA9IHt9O1xuICBjb25zdCBoT1AgPSBhY3Rpb25zLmhhc093blByb3BlcnR5O1xuICByZXR1cm4ge1xuICAgIHN1YnNjcmliZShhY3Rpb24sIGNiKSB7XG4gICAgICBpZiAoIWFjdGlvbiB8fCB0eXBlb2YgYWN0aW9uICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYERlZmF1bHQgYWRhcHRlciAnLnN1YnNjcmliZSgpJyBgXG4gICAgICAgICAgKyBgZXhwZWN0ZWQgYW4gYWN0aW9uIChzdHJpbmcpIGFzIGZpcnN0IGFyZ3VtZW50IGluc3RlYWQgYFxuICAgICAgICAgICsgYHJlY2VpdmVkOiAke2FjdGlvbn1gXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmICghY2IgfHwgdHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgRGVmYXVsdCBhZGFwdGVyICcuc3Vic2NyaWJlKCknIGV4cGVjdGVkIGEgZnVuY3Rpb24gYXMgc2Vjb25kIGBcbiAgICAgICAgICArIGBhcmd1bWVudCBpbnN0ZWFkIHJlY2VpdmVkOiAke2NifWBcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFoT1AuY2FsbChhY3Rpb25zLCBhY3Rpb24pKSB7XG4gICAgICAgIGFjdGlvbnNbYWN0aW9uXSA9IFtdO1xuICAgICAgfVxuXG4gICAgICBhY3Rpb25zW2FjdGlvbl0ucHVzaChjYik7XG4gICAgICByZXR1cm4gW2FjdGlvbiwgY2JdO1xuICAgIH0sXG5cbiAgICB1bnN1YnNjcmliZSh0b2tlbikge1xuICAgICAgaWYgKCF0b2tlbiB8fCAhQXJyYXkuaXNBcnJheSh0b2tlbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBEZWZhdWx0IGFkYXB0ZXIgJy51bnN1YnNjcmliZSgpJyBleHBlY3RlZCBhIGBcbiAgICAgICAgICArIGB0b2tlbiAoYXJyYXkpIGluc3RlYWQgcmVjZWl2ZWQ6ICR7dG9rZW59YFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ubGVuZ3RoICE9PSAyXG4gICAgICAgICAgfHwgdHlwZW9mIHRva2VuWzBdICE9PSAnc3RyaW5nJyB8fCB0eXBlb2YgdG9rZW5bMV0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBEZWZhdWx0IGFkYXB0ZXIgJy51bnN1YnNjcmliZSgpJyBleHBlY3RlZCBhIHZhbGlkIHRva2VuIGBcbiAgICAgICAgICArIGAoW3N0cmluZywgZnVuY3Rpb25dKSBpbnN0ZWFkIHJlY2VpdmVkOiAke3Rva2VufWBcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgW2FjdGlvbiwgY2JdID0gdG9rZW47XG4gICAgICBjb25zdCBjYWxsYmFja3MgPSBhY3Rpb25zW2FjdGlvbl0gfHwgW107XG4gICAgICBjb25zdCBpZHggPSBjYWxsYmFja3MuaW5kZXhPZihjYik7XG4gICAgICBpZiAoaWR4IDwgMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICBgWW91J3JlIHVuc3Vic2NyaWJpbmcgYW4gdW5yZWNvZ25pemVkIHRva2VuICR7dG9rZW59YFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpZHgsIDEpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBwdWJsaXNoKGFjdGlvbiwgLi4ucGFyYW1zKSB7XG4gICAgICBpZiAoIWFjdGlvbiB8fCB0eXBlb2YgYWN0aW9uICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYERlZmF1bHQgYWRhcHRlciAnLnB1Ymxpc2goKScgZXhwZWN0ZWQgYW4gYWN0aW9uIChzdHJpbmcpIGFzIGBcbiAgICAgICAgICArIGBmaXJzdCBhcmd1bWVudCBpbnN0ZWFkIHJlY2VpdmVkOiAke2FjdGlvbn1gXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaE9QLmNhbGwoYWN0aW9ucywgYWN0aW9uKSkge1xuICAgICAgICBjb25zb2xlLmluZm8oIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgIGBUaGUgYWN0aW9uICcke2FjdGlvbn0nIGJlaW5nIHB1Ymxpc2hlZCBoYXMgbm8gbGlzdGVuZXJzYFxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFjdGlvbnNbYWN0aW9uXS5mb3JFYWNoKChjYikgPT4gY2IoLi4ucGFyYW1zKSk7XG4gICAgfSxcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZURlZmF1bHRBZGFwdGVyO1xuIl19